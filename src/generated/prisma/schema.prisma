generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  password             String
  role                 Role      @default(MEMBER)
  avatar               String? //not
  status               String?   @default("active") //not
  lastSeen             DateTime? //not implmented
  isVerified           Boolean   @default(false) //not
  refreshToken         String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  deletedAt            DateTime? // soft delete
  fcmToken             String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  workspaces      UserOnWorkspace[] //اعضاء
  ownedWorkspaces Workspace[]       @relation("WorkspaceOwner") // مالك الورك سبيس
  InviteSent      Invite[]
  Channels        UserOnChannels[]
  Message         Message[]
  UserOnDM        UserOnDM[]
  MessageReaction MessageReaction[]
  MessageMention  MessageMention[]
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String    @unique
  deletedAt   DateTime? // soft delete

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  owner                     User                        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId                   String
  members                   UserOnWorkspace[]
  Invite                    Invite[]
  Channel                   Channel[]
  DirectMessageConversation DirectMessageConversation[]
}

model UserOnWorkspace {
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  user        User          @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  joinedAt    DateTime      @default(now())

  @@id([userId, workspaceId])
}

model Invite {
  id        String        @id @default(uuid())
  email     String
  token     String        @unique
  expiresAt DateTime
  status    InviteStatus  @default(PENDING)
  role      WorkspaceRole @default(MEMBER)
  deletedAt DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  invitedBy   User   @relation(fields: [invitedById], references: [id])
  invitedById String

  @@index([email, workspaceId])
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean   @default(true)
  workspaceId String
  deletedAt   DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  UserOnChannels UserOnChannels[]
  Message        Message[]

  @@index([workspaceId])
}

model UserOnChannels {
  userId    String
  channelId String
  joinedAt  DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
}

model Message {
  id        String    @id @default(uuid())
  content   String
  isEdited  Boolean   @default(false)
  deletedAt DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId         String
  channelId      String?
  conversationId String?

  user                      User                       @relation(fields: [userId], references: [id])
  channel                   Channel?                   @relation(fields: [channelId], references: [id])
  DirectMessageConversation DirectMessageConversation? @relation(fields: [conversationId], references: [id])
  reactions                 MessageReaction[]
  MessageMention            MessageMention[]

  @@index([channelId])
  @@index([userId])
}

model DirectMessageConversation {
  id           String     @id @default(uuid())
  participants UserOnDM[] // زي join table بين users و dm
  messages     Message[] // كل الرسائل المرتبطة بالـ DM
  workspaceId  String
  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  deletedAt    DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnDM {
  userId String
  dmId   String

  user User                      @relation(fields: [userId], references: [id])
  dm   DirectMessageConversation @relation(fields: [dmId], references: [id])

  @@id([userId, dmId])
}

model MessageReaction {
  id    String @id @default(uuid())
  emoji String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji]) // كل يوزر يعمل ريأكشن واحد من نفس النوع على نفس الرسالة
}

model MessageMention {
  id              String @id @default(uuid())
  messageId       String
  mentionedUserId String

  message       Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  mentionedUser User    @relation(fields: [mentionedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([messageId, mentionedUserId]) // Prevent duplicate mentions
}

enum Role {
  ADMIN
  MEMBER
  GUEST
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
