name: CD Build & Deploy

on:
  push:
    branches: ['**']
  workflow_dispatch: # تقدر تطلع deploy يدويًا من UI كمان

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: ENV_FILE

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build (production target) and push
        run: |
          IMAGE=${{ secrets.DOCKER_IMAGE_NAME }}
          docker build --target production -t $IMAGE .
          docker push $IMAGE

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: ENV_FILE
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) تأكد من وجود المجلد على السيرفر وأنشئه إذا لم يكن موجودًا
      - name: Ensure target directory exists on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            mkdir -p /home/${{ secrets.EC2_USER }}/WORKSY
            chmod 755 /home/${{ secrets.EC2_USER }}/WORKSY
            ls -ld /home/${{ secrets.EC2_USER }}/WORKSY || true

      # 2) أنشئ ملف .env مباشرة على السيرفر (مباشرة من الـ secrets، لا ترفع .env)
      - name: Create .env on EC2 (from GitHub Secrets)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            mkdir -p /home/${{ secrets.EC2_USER }}/WORKSY
            # use a quoted heredoc so secrets (including multi-line) are preserved as-is
            cat > /home/${{ secrets.EC2_USER }}/WORKSY/.env <<'ENV_EOF'
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}
            FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            BASE_URL=${{ secrets.BASE_URL }}
            CLIENT_URL=${{ secrets.CLIENT_URL }}
            ENV_EOF
            chmod 600 /home/${{ secrets.EC2_USER }}/WORKSY/.env
            echo ".env written on remote"

      # 3) نسخ ملفات docker-compose إلى السيرفر
      - name: Copy docker-compose files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: 'docker-compose.prod.yml'
          target: ${{ format('/home/{0}/WORKSY', secrets.EC2_USER) }}
          # اجعل tar مؤقت في /tmp على الـ runner (افتراضي) — أو عيّنه لمسار آخر حسب حاجتك
          tar_tmp_path: '/tmp'
          overwrite: true
          debug: true

      # 4) على السيرفر: سحب الصورة وتشغيل compose
      - name: 'SSH: Pull image & restart compose'
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.EC2_USER }}/WORKSY || exit 1
            ls -la
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }} || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans

      - name: Cleanup (runner)
        if: always()
        run: rm -f .env.server || true
