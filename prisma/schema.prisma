generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                String    @id @default(uuid())
  name                              String
  email                             String    @unique
  password                          String?
  role                              Role      @default(MEMBER) // Global application role
  avatar                            String?
  status                            String?   @default("active")
  lastSeen                          DateTime?
  isVerified                        Boolean   @default(false)
  refreshToken                      String?

  // Email Verification Fields
  emailVerificationToken            String?
  emailVerificationTokenExpires     DateTime?
  emailVerificationTokenSentAt      DateTime?

  // Password Reset Fields
  resetPasswordPin                  String?
  resetPasswordPinExpires           DateTime?
  resetPasswordToken                String?
  resetPasswordPinSentAt            DateTime?
  failedPinAttempts                 Int?      @default(0)

  // Login OTP fields
  loginOtp                          String?   @map("login_otp")
  loginOtpExpires                   DateTime? @map("login_otp_expires")
  loginSessionToken                 String?   @map("login_session_token")
  loginOtpSentAt                    DateTime? @map("login_otp_sent_at")

  // OAuth fields
  oauthProvider                     String?   @map("oauth_provider") // "google" | "microsoft"
  oauthId                           String?   @map("oauth_id")
  emailVerified                     Boolean   @default(false) @map("email_verified")
  lastLoginAt                       DateTime? @map("last_login_at")

  googleAccessToken                 String?
  googleRefreshToken                String?
  googleCalendarId                  String?   

  deletedAt                         DateTime? 

  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt

  // Relationships
  workspaces                        UserOnWorkspace[]
  ownedWorkspaces                   Workspace[]       @relation("WorkspaceOwner") // Workspaces created by this user
  ownedChannels                     Channel[]         @relation("ChannelOwner") // Channels created by this user
  InviteSent                        Invite[]
  Channels                          UserOnChannel[] 
  Message                           Message[]
  UserOnDM                          UserOnDM[]
  OrganizedMeetings                 Meeting[]         @relation("OrganizedMeetings") // Meetings organized by this user (NEW)
  UploadedFiles                     File[]            @relation("UploadedFiles") // Files uploaded by this user (NEW)

  @@index([email, resetPasswordPin])
  @@unique([oauthProvider, oauthId], name: "oauth_unique")
}

model Workspace {
  id                          String                        @id @default(uuid())
  name                        String
  description                 String?
  slug                        String
  deletedAt                   DateTime?

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt

  owner                       User                          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId                     String

  // Relationships
  members                     UserOnWorkspace[] 
  Invite                      Invite[]
  Channel                     Channel[] 
  DirectMessageConversation   DirectMessageConversation[]

  @@unique([slug, deletedAt])
}

model UserOnWorkspace {
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  user        User          @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  joinedAt    DateTime      @default(now())
  deletedAt   DateTime?
  @@id([userId, workspaceId])
}

model Invite {
  id          String        @id @default(uuid())
  email       String
  token       String        @unique
  expiresAt   DateTime
  status      InviteStatus  @default(PENDING)
  role        WorkspaceRole @default(MEMBER)
  deletedAt   DateTime? // soft delete

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String

  invitedBy   User          @relation(fields: [invitedById], references: [id])
  invitedById String

  @@index([email, workspaceId])
}

model Channel {
  id            String          @id @default(uuid())
  name          String
  description   String?
  isPublic      Boolean         @default(true)
  workspaceId   String
  deletedAt     DateTime? 

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relationships
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  owner         User            @relation("ChannelOwner", fields: [ownerId], references: [id])
  ownerId       String
  UserOnChannels UserOnChannel[]
  Message       Message[]
  Meeting       Meeting[]      

  @@index([workspaceId])
}

model UserOnChannel {
  userId    String
  channelId String
  role      ChannelRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  deletedAt DateTime? 
  // Relationships
  user      User        @relation(fields: [userId], references: [id])
  channel   Channel     @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
}

model Message {
  id                        String                      @id @default(uuid())
  content                   String
  isEdited                  Boolean                     @default(false)
  deletedAt                 DateTime? 
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt

  userId                    String
  channelId                 String?
  conversationId            String?

  user                      User                        @relation(fields: [userId], references: [id])
  channel                   Channel?                    @relation(fields: [channelId], references: [id])
  DirectMessageConversation DirectMessageConversation?  @relation(fields: [conversationId], references: [id])
  files                     File[]                      

  @@index([channelId])
  @@index([userId])
}

model DirectMessageConversation {
  id            String    @id @default(uuid())
  participants  UserOnDM[]
  messages      Message[]
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  deletedAt     DateTime? 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserOnDM {
  userId    String
  dmId      String

  deletedAt DateTime?

  user      User      @relation(fields: [userId], references: [id])
  dm        DirectMessageConversation @relation(fields: [dmId], references: [id])

  @@id([userId, dmId])
}

model Meeting {
  id                      String    @id @default(uuid())
  title                   String
  description             String?
  startTime               DateTime
  endTime                 DateTime
  location                String?
  googleCalendarEventId   String?   @unique
  googleCalendarHtmlLink  String?

  channel                 Channel   @relation(fields: [channelId], references: [id])
  channelId               String

  organizer               User      @relation("OrganizedMeetings", fields: [organizerId], references: [id])
  organizerId             String

  deletedAt               DateTime?

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([channelId])
  @@index([organizerId])
}

model File {
  id          String    @id @default(uuid())
  filename    String 
  mimetype    String    
  size        Int      
  url         String    @unique
  path        String    @unique

  uploadedBy  User      @relation("UploadedFiles", fields: [uploadedById], references: [id])
  uploadedById String

  message     Message?  @relation(fields: [messageId], references: [id])
  messageId   String?

  deletedAt   DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([uploadedById])
  @@index([messageId])
}


enum Role {
  APP_OWNER 
  APP_ADMIN 
  MEMBER   
  GUEST     
}


enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum ChannelRole {
  OWNER 
  ADMIN
  MEMBER 
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
