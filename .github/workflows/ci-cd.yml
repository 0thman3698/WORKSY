name: CI / Build / Push / Deploy

on:
  push:
    branches: ['**'] # ممكن تخليها [main] لو عايز CI/CD بس على main
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

jobs:
  # --------------------
  # 1️⃣ Run integration tests
  # --------------------
  test:
    runs-on: ubuntu-latest
    environment: ENV_FILE

    env:
      ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
      REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
      DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      BASE_URL: ${{ secrets.BASE_URL }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env (safe format)
        run: |
          {
            echo "ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}"
            echo "REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}"
            echo "DATABASE_URL=${DATABASE_URL_TEST}"
            echo "FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}"
            echo "FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}"
            echo "FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}"
            echo "CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}"
            echo "CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}"
            echo "CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}"
            echo "SMTP_HOST=${SMTP_HOST}"
            echo "SMTP_PORT=${SMTP_PORT}"
            echo "SMTP_USER=${SMTP_USER}"
            echo "SMTP_PASSWORD=${SMTP_PASSWORD}"
            echo "BASE_URL=${BASE_URL}"
            echo "CLIENT_URL=${CLIENT_URL}"
          } > .env

      - name: Run integration tests
        run: |
          docker compose -f docker-compose.test.yml up --build --exit-code-from backend-test

      - name: Clean up (tests)
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  # --------------------
  # 2️⃣ Build & Push image to Docker Hub
  # --------------------
  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    environment: ENV_FILE
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build (production target) and push
        run: |
          IMAGE=${{ secrets.DOCKER_IMAGE_NAME }}
          docker build --target production -t $IMAGE .
          docker push $IMAGE

  # --------------------
  # 3️⃣ Deploy on EC2
  # --------------------
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: ENV_FILE
    if: github.ref == 'refs/heads/master'

    steps:
      # ✅ أول حاجة: نعمل checkout عشان نجيب ملفات المشروع
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env for EC2
        run: |
          {
            echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}"
            echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}"
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
            echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}"
            echo "FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}"
            echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}"
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}"
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}"
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}"
            echo "SMTP_HOST=${{ secrets.SMTP_HOST }}"
            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}"
            echo "SMTP_USER=${{ secrets.SMTP_USER }}"
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}"
            echo "BASE_URL=${{ secrets.BASE_URL }}"
            echo "CLIENT_URL=${{ secrets.CLIENT_URL }}"
          } > .env.server

      - name: Ensure remote dir and inspect remote environment (debug)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "Remote user:"
            id
            echo "Check home and target dir:"
            echo "HOME = $HOME"
            ls -la /home/${{ secrets.EC2_USER }} || true
            ls -la /home/${{ secrets.EC2_USER }}/WORKSY || true
            echo "Disk usage (root and home):"
            df -h /
            df -h /home || true
            echo "Available space in WORKSY parent:"
            df -h $(dirname /home/${{ secrets.EC2_USER }}/WORKSY) || true

      # ✅ نسخ ملفات الـ compose والـ env للسيرفر تلقائيًا
      - name: Copy deploy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: 'docker-compose.prod.yml'
          target: '/home/${{ secrets.EC2_USER }}/WORKSY/'
          tar_tmp_path: '/tmp'
          overwrite: 'true'
          debug: true

      - name: 'SSH: Pull image & restart compose'
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USER }}/WORKSY || exit 1
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }} || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans

      - name: Clean up
        if: always()
        run: rm -f .env.server
