generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String?
  role         Role       @default(MEMBER) // Global application role
  avatar       String?
  status       UserStatus @default(ACTIVE)
  lastSeen     DateTime?
  isVerified   Boolean    @default(false)
  refreshToken String?

  // Email Verification Fields
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  emailVerificationTokenSentAt  DateTime?

  // Password Reset Fields
  resetPasswordPin        String?
  resetPasswordPinExpires DateTime?
  resetPasswordToken      String?
  resetPasswordPinSentAt  DateTime?
  failedPinAttempts       Int?      @default(0)

  // Login OTP fields
  loginOtp          String?   @map("login_otp")
  loginOtpExpires   DateTime? @map("login_otp_expires")
  loginSessionToken String?   @map("login_session_token")
  loginOtpSentAt    DateTime? @map("login_otp_sent_at")

  // OAuth fields
  oauthProvider String?   @map("oauth_provider") // "google" | "microsoft"
  oauthId       String?   @map("oauth_id")
  emailVerified Boolean   @default(false) @map("email_verified")
  lastLoginAt   DateTime? @map("last_login_at")

  googleAccessToken  String?
  googleRefreshToken String?
  googleCalendarId   String?

  fcmToken String?

  deletedAt DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  workspaces      UserOnWorkspace[] // User's membership and role in specific workspaces
  ownedWorkspaces Workspace[]       @relation("WorkspaceOwner") // Workspaces created by this user
  ownedChannels   Channel[]         @relation("ChannelOwner") // Channels created by this user
  InviteSent      Invite[]
  Channels        UserOnChannel[] // User's membership and role in specific channels
  Message         Message[]
  UserOnDM        UserOnDM[]
  MessageReaction MessageReaction[]
  MessageMention  MessageMention[]
  Channel         Channel[]
  Meeting         Meeting[]         @relation("OrganizedMeetings") // Meetings organized by this user
  File            File[]            @relation("UploadedFiles") // Files uploaded by this user (NEW)

  @@unique([oauthProvider, oauthId], name: "oauth_unique")
  @@index([email, resetPasswordPin])
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String
  deletedAt   DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  ownerId String // The global User ID of the workspace owner

  // Relationships
  members                   UserOnWorkspace[] // All users associated with this workspace and their roles
  Invite                    Invite[]
  Channel                   Channel[] // Channels belonging to this workspace
  DirectMessageConversation DirectMessageConversation[]

  @@unique([slug, deletedAt])
}

model UserOnWorkspace {
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  user        User          @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  joinedAt    DateTime      @default(now())
  deletedAt   DateTime?

  @@id([userId, workspaceId])
}

model Invite {
  id        String        @id @default(uuid())
  email     String
  token     String        @unique
  expiresAt DateTime
  status    InviteStatus  @default(PENDING)
  role      WorkspaceRole @default(MEMBER) // Role the invited user will have in the workspace
  deletedAt DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  invitedBy   User   @relation(fields: [invitedById], references: [id])
  invitedById String

  @@index([email, workspaceId])
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean   @default(true)
  workspaceId String
  deletedAt   DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  owner          User            @relation("ChannelOwner", fields: [ownerId], references: [id])
  ownerId        String // The global User ID of the channel owner
  UserOnChannels UserOnChannel[] // Users within this channel and their channel-specific roles
  Message        Message[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?
  Meeting        Meeting[]

  @@index([workspaceId])
}

model UserOnChannel {
  userId    String
  channelId String
  role      ChannelRole @default(MEMBER) // Role specific to this channel
  joinedAt  DateTime    @default(now())
  deletedAt DateTime? // <-- ADD THIS LINE for soft delete cascading
  // Relationships
  user      User        @relation(fields: [userId], references: [id])
  channel   Channel     @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
}

model Message {
  id        String    @id @default(uuid())
  content   String
  isEdited  Boolean   @default(false)
  deletedAt DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId         String
  channelId      String?
  conversationId String?

  user                      User                       @relation(fields: [userId], references: [id])
  channel                   Channel?                   @relation(fields: [channelId], references: [id])
  DirectMessageConversation DirectMessageConversation? @relation(fields: [conversationId], references: [id])
  reactions                 MessageReaction[]
  MessageMention            MessageMention[]
  File                      File[]

  @@index([channelId])
  @@index([userId])
}

model DirectMessageConversation {
  id           String     @id @default(uuid())
  participants UserOnDM[] // زي join table بين users و dm
  messages     Message[] // كل الرسائل المرتبطة بالـ DM
  workspaceId  String
  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  deletedAt    DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnDM {
  userId String
  dmId   String

  deletedAt DateTime?

  user User                      @relation(fields: [userId], references: [id])
  dm   DirectMessageConversation @relation(fields: [dmId], references: [id])

  @@id([userId, dmId])
}

model MessageReaction {
  id    String @id @default(uuid())
  emoji String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji]) // كل يوزر يعمل ريأكشن واحد من نفس النوع على نفس الرسالة
}

model MessageMention {
  id              String @id @default(uuid())
  messageId       String
  mentionedUserId String

  message       Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  mentionedUser User    @relation(fields: [mentionedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([messageId, mentionedUserId]) // Prevent duplicate mentions
}

model Meeting {
  id                     String   @id @default(uuid())
  title                  String
  description            String?
  startTime              DateTime
  endTime                DateTime
  location               String?
  googleCalendarEventId  String?  @unique
  googleCalendarHtmlLink String?

  // Relation to the Channel where the meeting is scheduled
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  organizer   User   @relation("OrganizedMeetings", fields: [organizerId], references: [id])
  organizerId String

  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([organizerId])
}

model File {
  id       String @id @default(uuid())
  filename String
  mimetype String
  size     Int
  url      String @unique
  path     String @unique

  uploadedBy   User   @relation("UploadedFiles", fields: [uploadedById], references: [id])
  uploadedById String

  message   Message? @relation(fields: [messageId], references: [id])
  messageId String?

  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uploadedById])
  @@index([messageId])
}

// Global application roles for a User
enum Role {
  APP_OWNER // Highest level, full control over the application.
  APP_ADMIN // Global administrator, can manage users, possibly workspaces.
  MEMBER // Regular application user.
  GUEST // Limited access user.
}

// Roles within a specific Workspace
enum WorkspaceRole {
  OWNER // Creator/primary manager of a specific workspace.
  ADMIN // Administrator within a specific workspace.
  MEMBER // Regular participant within a specific workspace.
}

// Roles within a specific Channel
enum ChannelRole {
  OWNER // Creator/primary manager of a specific channel.
  ADMIN // Administrator within a specific channel.
  MEMBER // Regular participant within a specific channel.
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
